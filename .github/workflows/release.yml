#
# .github/workflows/release.yml
#
---
name: release
defaults:
  run:
    # Prefixes all `run` commands with the following command to force them to run outside Rosetta.
    shell: arch -arm64 /bin/bash --noprofile --norc -eo pipefail {0}
on:
  release:
    types: [published]
jobs:
  start:
    runs-on: macos-15
    outputs:
      dry_run: ${{ steps.dry_run.outputs.dry_run }}
      mas_version: ${{ steps.mas_version.outputs.mas_version }}
      pre_release: ${{ steps.pre_release.outputs.pre_release }}
    steps:
      # Logs event details and sets `DRY_RUN` env var
      # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable
      # https://docs.github.com/en/webhooks/webhook-events-and-payloads?actionType=published#release
      - name: üîà Log release event
        # This step will only run for a real 'release' event.
        if: ${{ github.event.release.name != '' }}
        run: |
          echo 'Triggered by a release publication event (wet run)'
          echo 'release.name: ${{ github.event.release.name }}'
          echo 'release.tag_name: ${{ github.event.release.tag_name }}'
          echo 'release.target_commitish: ${{ github.event.release.target_commitish }}'
          echo $'release.body: \n${{ github.event.release.body }}'

      - id: dry_run
        run: |
          echo DRY_RUN=false >>"${GITHUB_OUTPUT}"

      - id: mas_version
        run: |
          echo 'MAS_VERSION=${{ github.event.release.tag_name }}' >>"${GITHUB_OUTPUT}"

      - id: pre_release
        run: |
          echo "PRE_RELEASE=$(grep -q '-' <<<"${MAS_VERSION}" && echo 'true' || echo 'false')" >>"${GITHUB_OUTPUT}"

  pkg-installer:
    runs-on: macos-15
    needs: start
    steps:
      - uses: actions/checkout@v4
        with:
          # A fetch-depth of 0 includes all history and tags for script/version
          fetch-depth: 0
          ref: ${{ needs.start.outputs.mas_version }}

      - name: üë¢ Bootstrap
        run: |
          script/bootstrap -f

      # Important to trigger a universal build first as package just works with
      # the `mas` binary in finds in the build dir.
      - name: üèóÔ∏è Build Universal
        run: |
          script/build --universal

      - name: üì¶ macOS Package
        run: |
          script/package

      - name: üöÄ Upload mas.pkg
        env:
          GH_TOKEN: ${{ github.token }}
          DRY_RUN: ${{ needs.start.outputs.dry_run }}
        if: ${{ needs.start.outputs.dry_run == 'false' }}
        run: |
          gh release upload '${{ needs.start.outputs.mas_version }}' \
            .build/mas.pkg

  homebrew-tap:
    runs-on: macos-15
    needs: start
    steps:
      - name: ‚§¥Ô∏è Bump mas tap formula
        env:
          DRY_RUN: ${{ needs.start.outputs.dry_run }}
          HOMEBREW_GITHUB_API_TOKEN: ${{ secrets.HOMEBREW_GITHUB_API_TOKEN }}
        run: |
          brew bump-formula-pr \
            --tag '${{ needs.start.outputs.mas_version }}' \
            --revision "$(git rev-list -n 1 '${{ needs.start.outputs.mas_version }}')" \
            --strict \
            --verbose \
            --online \
            --no-browse \
            ${{ needs.start.outputs.dry_run }} \
            mas-cli/tap/mas

  homebrew-core:
    runs-on: macos-15
    needs: [start, homebrew-tap]
    if: ${{ needs.start.outputs.pre_release == 'false' }}
    steps:
      - uses: actions/checkout@v4
        with:
          # A fetch-depth of 0 includes all history and tags for script/version
          fetch-depth: 0
          ref: ${{ needs.start.outputs.mas_version }}

      - name: üë¢ Bootstrap
        run: |
          script/bootstrap -f

      - name: üç∫ Update homebrew-core mas formula
        env:
          HOMEBREW_GITHUB_API_TOKEN: ${{ secrets.HOMEBREW_GITHUB_API_TOKEN }}
          DRY_RUN: ${{ needs.start.outputs.dry_run }}
        run: |
          script/brew_core_update
