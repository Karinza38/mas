#!/bin/bash -eu
#
# script/format
# mas
#
# Automatically formats and fixes style violations using various tools.
#
# Please keep in sync with script/lint.
#

set -o pipefail

mas_dir="$(readlink -fn "$(dirname "${BASH_SOURCE:-"${0}"}")/..")"

if ! cd -- "${mas_dir}"; then
  printf $'Error: Could not cd into mas directory: %s\n' "${mas_dir}" >&2
  exit 1
fi

printf $'==> 🚨 Formatting mas %s\n' "$(script/version)"

for formatter in markdownlint prettier swift-format swiftformat swiftlint yamllint; do
  if [[ ! -x "$(command -v "${formatter}")" ]]; then
    printf $'error: %s is not installed. Run \'script/bootstrap\' or \'brew install %s\'.\n' "${formatter}" "${formatter}" >&2
    exit 1
  fi
done

for source in Package.swift Sources Tests; do
  printf -- $'--> 🦅 %s swift-format\n' "${source}"
  swift-format format --in-place --recursive "${source}"
  printf -- $'--> 🦅 %s swiftformat\n' "${source}"
  script -q /dev/null swiftformat --strict "${source}" |
    (grep -vxE '(?:\^D\x08{2})?Running SwiftFormat\.{3}\r|Reading (?:config|swift-version) file at .*|\x1b\[32mSwiftFormat completed in \d+\.\d+s\.\x1b\[0m\r|0/\d+ files formatted\.\r' || true)
  printf -- $'--> 🦅 %s swiftlint\n' "${source}"
  swiftlint --fix --quiet "${source}"
done

printf -- $'--> 〽️ Markdown\n'
markdownlint --config .markdownlint.json --fix . docs

printf -- $'--> 📝 YAML\n'
# shellcheck disable=SC2046
script -q /dev/null prettier --write $(yamllint --list-files .) |
  (grep -vxE '.+ \d+ms \(unchanged\)\r' || true)
