#!/bin/bash -ex
#
# script/bottle
# mas
#
# Builds bottles of mas Homebrew formula for custom tap:
# https://github.com/mas-cli/homebrew-tap
#
# This script should be run _after_ the formula has been updated in Homebrew
#

################################################################################
#
# Variables
#

mas_dir="$(readlink -fn "$(dirname "${BASH_SOURCE:-"${0}"}")/..")"

if ! cd -- "${mas_dir}"; then
  printf $'Error: Could not cd into mas directory: %s\n' "${mas_dir}" >&2
  exit 1
fi

BOTTLE_DIR=".build/bottles"
CORE_TAP_PATH="$(brew --repo homebrew/core)"
version="$(script/version)"
ROOT_URL="https://github.com/mas-cli/mas/releases/download/v${version}"

# Supports macOS 10.13 and later
OS_NAMES=(
  sequoia
  arm64_sequoia
  sonoma
  arm64_sonoma
  ventura
  arm64_ventura
  monterey
  arm64_monterey
  big_sur
  arm64_big_sur
  catalina
  mojave
  high_sierra
  sierra
  el_capitan
)

macos_version="$(sw_vers -productVersion)"
case "${macos_version%%.*}" in
  15)
    CURRENT_PLATFORM=sequoia
    ;;
  14)
    CURRENT_PLATFORM=sonoma
    ;;
  13)
    CURRENT_PLATFORM=ventura
    ;;
  12)
    CURRENT_PLATFORM=monterey
    ;;
  11)
    CURRENT_PLATFORM=big_sur
    ;;
  10)
    CURRENT_PLATFORM=catalina
    ;;
  *)
    echo 'Unsupported macOS version. This script requires Catalina or newer.' >&2
    exit 1
    ;;
esac

# Prefix platform with architecture
if [[ "$(uname -m)" == 'arm64' ]]; then
  CURRENT_PLATFORM="arm64_${CURRENT_PLATFORM}"
fi

################################################################################
#
# Preflight checks
#

# # Uninstall if necessary
# brew remove mas 2>/dev/null || true
# brew remove mas-cli/tap/mas 2>/dev/null || true

# # Uninstall if still found on path
# if command -v mas >/dev/null; then
#   script/uninstall || true
# fi

# Use formula from custom tap
# brew tap mas-cli/tap
# brew update

# Audit formula
brew audit --strict --verbose --formula --tap mas-cli/tap mas
brew style Homebrew/mas-tap.rb

################################################################################
#
# Build the formula for the current macOS version and architecture.
#

echo "==> 🍼 Bottling mas ${version} on ${CURRENT_PLATFORM} for ${OS_NAMES[*]}"
brew install --build-bottle mas-cli/tap/mas

# Generate bottle do block, dropping last 2 lines
brew bottle --verbose --no-rebuild --root-url="${ROOT_URL}" mas-cli/tap/mas

# Output filename from brew bottle
generated_bottle_filename="mas--${version}.${CURRENT_PLATFORM}.bottle.tar.gz"

if [[ ! -e "${generated_bottle_filename}" ]]; then
  echo "Bottle not found: ${generated_bottle_filename}" >&2
  echo 'If an old version is showing in the log and filename, then make sure the formula has been updated in:' >&2
  echo "${CORE_TAP_PATH}" >&2
  exit 1
fi

SHA256="$(shasum -a 256 "${generated_bottle_filename}" | cut -f 1 -d ' ' -)"

mkdir -p "${BOTTLE_DIR}"

# Start of bottle block
BOTTLE_BLOCK="$(
  cat <<-EOF
bottle do
  root_url "${ROOT_URL}"
EOF
)"

################################################################################
#
# Copy the bottle for all macOS version + architecture combinations.
#

# Fix filename
for os in "${OS_NAMES[@]}"; do
  cp -v "${generated_bottle_filename}" "${BOTTLE_DIR}/mas-${version}.${os}.bottle.tar.gz"

  # Append each os
  # BOTTLE_BLOCK="$(printf "${BOTTLE_BLOCK}\n  sha256 cellar: :any_skip_relocation, %-15s %s" "${os}:" "${SHA256}")"
  BOTTLE_BLOCK="${BOTTLE_BLOCK}$(
    cat <<-EOF

    sha256 cellar: :any_skip_relocation, ${os}: "${SHA256}"
EOF
  )"
done

# End of bottle block
BOTTLE_BLOCK="$(
  cat <<-EOF

end
EOF
)"

rm "${generated_bottle_filename}"
ls -l "${BOTTLE_DIR}"
echo "${BOTTLE_BLOCK}"
